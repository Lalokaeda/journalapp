// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using journalapp;

#nullable disable

namespace journalapp.Migrations
{
    [DbContext(typeof(JournalContext))]
    partial class JournalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ParentOfStud", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SrudentId")
                        .HasColumnType("int");

                    b.HasKey("ParentId", "SrudentId");

                    b.HasIndex("SrudentId");

                    b.ToTable("ParentOfStud", (string)null);
                });

            modelBuilder.Entity("StudentsOfRiskGroup", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ReasonId");

                    b.HasIndex("ReasonId");

                    b.ToTable("StudentsOfRiskGroup", (string)null);
                });

            modelBuilder.Entity("journalapp.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("StudentAssotiationId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Workshop")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("StudentAssotiationId");

                    b.HasIndex("StudentId");

                    b.ToTable("Business", (string)null);
                });

            modelBuilder.Entity("journalapp.CommunicationHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Result")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("StudCount")
                        .HasColumnType("int");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("CommunicationHours");
                });

            modelBuilder.Entity("journalapp.CourseOfGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Course")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.HasKey("GroupId", "Course");

                    b.ToTable("CourseOfGroup", (string)null);
                });

            modelBuilder.Entity("journalapp.Curator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChildGroupId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("Curators");
                });

            modelBuilder.Entity("journalapp.Division", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("journalapp.EducativeEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Lobid")
                        .HasColumnType("int")
                        .HasColumnName("LOBId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("Lobid");

                    b.ToTable("EducativeEvents");
                });

            modelBuilder.Entity("journalapp.Emp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("journalapp.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("journalapp.GraphicVisitsHostel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GoalOfVisil")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("GraphicVisitsHostel", (string)null);
                });

            modelBuilder.Entity("journalapp.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecruitmentYear")
                        .HasColumnType("date");

                    b.Property<string>("SpecialityId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("journalapp.HealthGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Recommendation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_HealthGroup");

                    b.ToTable("HealthGroups");
                });

            modelBuilder.Entity("journalapp.Hostel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Hostels");
                });

            modelBuilder.Entity("journalapp.LineOfBusiness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("LineOfBusiness", (string)null);
                });

            modelBuilder.Entity("journalapp.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("journalapp.ParentMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("GroupId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("ParentsCount")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Theme")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("ParentMeeting", (string)null);
                });

            modelBuilder.Entity("journalapp.Passport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContStudWomen")
                        .HasColumnType("int");

                    b.Property<int?>("CountCommunHours")
                        .HasColumnType("int");

                    b.Property<int?>("CountHostelVisits")
                        .HasColumnType("int");

                    b.Property<int?>("CountOrphans")
                        .HasColumnType("int");

                    b.Property<int?>("CountOvzstud")
                        .HasColumnType("int")
                        .HasColumnName("CountOVZStud");

                    b.Property<int?>("CountParentsMeetings")
                        .HasColumnType("int");

                    b.Property<int?>("CountPdnstud")
                        .HasColumnType("int")
                        .HasColumnName("CountPDNStud");

                    b.Property<int?>("CountPedControl")
                        .HasColumnType("int");

                    b.Property<int?>("CountStudInEvents")
                        .HasColumnType("int");

                    b.Property<int?>("CountStudMen")
                        .HasColumnType("int");

                    b.Property<int?>("CountStudents")
                        .HasColumnType("int");

                    b.Property<int?>("CountWorkOfParents")
                        .HasColumnType("int");

                    b.Property<int?>("CountWorkOfStud")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Passport", (string)null);
                });

            modelBuilder.Entity("journalapp.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("journalapp.RiskGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("RiskGroups");
                });

            modelBuilder.Entity("journalapp.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HostelId")
                        .HasColumnType("int");

                    b.Property<int>("NumofRoom")
                        .HasColumnType("int");

                    b.Property<int>("Roominess")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostelId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("journalapp.Speciality", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("journalapp.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("HealthGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCommerce")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpelled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("HealthGroupId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoomId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("journalapp.StudentAssotiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("StudentAssotiations");
                });

            modelBuilder.Entity("journalapp.StudentsOfEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsOfEvents");
                });

            modelBuilder.Entity("journalapp.StudentsOnPedControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("MeasuresTaken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Tocid")
                        .HasColumnType("int")
                        .HasColumnName("TOCId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("Tocid");

                    b.ToTable("StudentsOnPedControl", (string)null);
                });

            modelBuilder.Entity("journalapp.TypeOfCrime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfCrime", (string)null);
                });

            modelBuilder.Entity("journalapp.WorkWithParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Questions")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("WorkWithParents");
                });

            modelBuilder.Entity("journalapp.WorkWithStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Work")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("WorkWithStudents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("journalapp.Emp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("journalapp.Emp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("journalapp.Emp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("journalapp.Emp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParentOfStud", b =>
                {
                    b.HasOne("journalapp.Parent", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("FK_ParentOfStud_Parents");

                    b.HasOne("journalapp.Student", null)
                        .WithMany()
                        .HasForeignKey("SrudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ParentOfStud_Students");
                });

            modelBuilder.Entity("StudentsOfRiskGroup", b =>
                {
                    b.HasOne("journalapp.RiskGroup", null)
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOfRiskGroup_RiskGroups");

                    b.HasOne("journalapp.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOfRiskGroup_Students");
                });

            modelBuilder.Entity("journalapp.Business", b =>
                {
                    b.HasOne("journalapp.StudentAssotiation", "StudentAssotiation")
                        .WithMany("Businesses")
                        .HasForeignKey("StudentAssotiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Business_StudentAssotiations");

                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("Businesses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Business_Students");

                    b.Navigation("Student");

                    b.Navigation("StudentAssotiation");
                });

            modelBuilder.Entity("journalapp.CommunicationHour", b =>
                {
                    b.HasOne("journalapp.Group", "Group")
                        .WithMany("CommunicationHours")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommunicationHours_Groups");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("journalapp.CourseOfGroup", b =>
                {
                    b.HasOne("journalapp.Group", "Group")
                        .WithMany("CourseOfGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CourseOfGroup_Groups");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("journalapp.Curator", b =>
                {
                    b.HasOne("journalapp.Group", "ChildGroup")
                        .WithMany("Curators")
                        .HasForeignKey("ChildGroupId")
                        .HasConstraintName("FK_Curators_Groups");

                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("Curators")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Curators_Students");

                    b.Navigation("ChildGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("journalapp.EducativeEvent", b =>
                {
                    b.HasOne("journalapp.Emp", "Emp")
                        .WithMany("EducativeEvents")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EducativeEvents_Emps");

                    b.HasOne("journalapp.LineOfBusiness", "Lob")
                        .WithMany("EducativeEvents")
                        .HasForeignKey("Lobid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EducativeEvents_LineOfBusiness");

                    b.Navigation("Emp");

                    b.Navigation("Lob");
                });

            modelBuilder.Entity("journalapp.GraphicVisitsHostel", b =>
                {
                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("GraphicVisitsHostels")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GraphicVisitsHostel_Students");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("journalapp.Group", b =>
                {
                    b.HasOne("journalapp.Emp", "Emp")
                        .WithMany("Groups")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Groups_Emps");

                    b.HasOne("journalapp.Speciality", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Groups_Specialities");

                    b.Navigation("Emp");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("journalapp.ParentMeeting", b =>
                {
                    b.HasOne("journalapp.Group", "Group")
                        .WithMany("ParentMeetings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ParentMeeting_Groups");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("journalapp.Passport", b =>
                {
                    b.HasOne("journalapp.Group", "Group")
                        .WithMany("Passports")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Passport_Groups");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("journalapp.Room", b =>
                {
                    b.HasOne("journalapp.Hostel", "Hostel")
                        .WithMany("Rooms")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_Hostels");

                    b.Navigation("Hostel");
                });

            modelBuilder.Entity("journalapp.Speciality", b =>
                {
                    b.HasOne("journalapp.Division", "Division")
                        .WithMany("Specialities")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Specialities_Divisions");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("journalapp.Student", b =>
                {
                    b.HasOne("journalapp.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Students_Groups");

                    b.HasOne("journalapp.HealthGroup", "HealthGroup")
                        .WithMany("Students")
                        .HasForeignKey("HealthGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Students_HealthGroup");

                    b.HasOne("journalapp.Position", "Position")
                        .WithMany("Students")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Students_Positions");

                    b.HasOne("journalapp.Room", "Room")
                        .WithMany("Students")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Students_Rooms");

                    b.Navigation("Group");

                    b.Navigation("HealthGroup");

                    b.Navigation("Position");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("journalapp.StudentsOfEvent", b =>
                {
                    b.HasOne("journalapp.Event", "Event")
                        .WithMany("StudentsOfEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOfEvents_Events");

                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("StudentsOfEvents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOfEvents_Students");

                    b.Navigation("Event");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("journalapp.StudentsOnPedControl", b =>
                {
                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("StudentsOnPedControls")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOnPedControl_Students");

                    b.HasOne("journalapp.TypeOfCrime", "Toc")
                        .WithMany("StudentsOnPedControls")
                        .HasForeignKey("Tocid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOnPedControl_TypeOfCrime");

                    b.Navigation("Student");

                    b.Navigation("Toc");
                });

            modelBuilder.Entity("journalapp.WorkWithParent", b =>
                {
                    b.HasOne("journalapp.Parent", "Parent")
                        .WithMany("WorkWithParents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WorkWithParents_Parents");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("journalapp.WorkWithStudent", b =>
                {
                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("WorkWithStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WorkWithStudents_Students");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("journalapp.Division", b =>
                {
                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("journalapp.Emp", b =>
                {
                    b.Navigation("EducativeEvents");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("journalapp.Event", b =>
                {
                    b.Navigation("StudentsOfEvents");
                });

            modelBuilder.Entity("journalapp.Group", b =>
                {
                    b.Navigation("CommunicationHours");

                    b.Navigation("CourseOfGroups");

                    b.Navigation("Curators");

                    b.Navigation("ParentMeetings");

                    b.Navigation("Passports");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("journalapp.HealthGroup", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("journalapp.Hostel", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("journalapp.LineOfBusiness", b =>
                {
                    b.Navigation("EducativeEvents");
                });

            modelBuilder.Entity("journalapp.Parent", b =>
                {
                    b.Navigation("WorkWithParents");
                });

            modelBuilder.Entity("journalapp.Position", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("journalapp.Room", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("journalapp.Speciality", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("journalapp.Student", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("Curators");

                    b.Navigation("GraphicVisitsHostels");

                    b.Navigation("StudentsOfEvents");

                    b.Navigation("StudentsOnPedControls");

                    b.Navigation("WorkWithStudents");
                });

            modelBuilder.Entity("journalapp.StudentAssotiation", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("journalapp.TypeOfCrime", b =>
                {
                    b.Navigation("StudentsOnPedControls");
                });
#pragma warning restore 612, 618
        }
    }
}
