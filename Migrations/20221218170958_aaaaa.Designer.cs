// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using journalapp;

#nullable disable

namespace journalapp.Migrations
{
    [DbContext(typeof(JournalContext))]
    [Migration("20221218170958_aaaaa")]
    partial class aaaaa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParentOfStud", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SrudentId")
                        .HasColumnType("int");

                    b.HasKey("ParentId", "SrudentId");

                    b.HasIndex("SrudentId");

                    b.ToTable("ParentOfStud", (string)null);
                });

            modelBuilder.Entity("RoomsOfHostel", b =>
                {
                    b.Property<int>("HostelId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("HostelId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomsOfHostel", (string)null);
                });

            modelBuilder.Entity("StudentsOfRiskGroup", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ReasonId");

                    b.HasIndex("ReasonId");

                    b.ToTable("StudentsOfRiskGroup", (string)null);
                });

            modelBuilder.Entity("journalapp.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("StudentAssotiationId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Workshop")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("StudentAssotiationId");

                    b.HasIndex("StudentId");

                    b.ToTable("Business", (string)null);
                });

            modelBuilder.Entity("journalapp.ClassTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Surname")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ClassTeachers");
                });

            modelBuilder.Entity("journalapp.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("journalapp.CourseOfGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.HasKey("GroupId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseOfGroup", (string)null);
                });

            modelBuilder.Entity("journalapp.Curator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChildGroupId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildGroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("Curators");
                });

            modelBuilder.Entity("journalapp.Division", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("journalapp.EducativeEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassTeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Lobid")
                        .HasColumnType("int")
                        .HasColumnName("LOBId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClassTeacherId");

                    b.HasIndex("Lobid");

                    b.ToTable("EducativeEvents");
                });

            modelBuilder.Entity("journalapp.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("journalapp.GraphicVisitsHostel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GoalOfVisil")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("GraphicVisitsHostel", (string)null);
                });

            modelBuilder.Entity("journalapp.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("ClassTeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecruitmentYear")
                        .HasColumnType("date");

                    b.Property<string>("SpecialityId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("ClassTeacherId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("journalapp.HealthGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Recommendation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HealthGroup", (string)null);
                });

            modelBuilder.Entity("journalapp.Hostel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Hostels");
                });

            modelBuilder.Entity("journalapp.LineOfBusiness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("LineOfBusiness", (string)null);
                });

            modelBuilder.Entity("journalapp.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("journalapp.RiskGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("RiskGroups");
                });

            modelBuilder.Entity("journalapp.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HostelId")
                        .HasColumnType("int");

                    b.Property<int>("NumofRoom")
                        .HasColumnType("int");

                    b.Property<int>("Roominess")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostelId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("journalapp.Speciality", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("journalapp.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("HealthGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCommerce")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpelled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("HealthGroupId");

                    b.HasIndex("RoomId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("journalapp.StudentAssotiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("StudentAssotiations");
                });

            modelBuilder.Entity("journalapp.StudentsOfEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsOfEvents");
                });

            modelBuilder.Entity("journalapp.StudentsOnPedControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("MeasuresTaken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Tocid")
                        .HasColumnType("int")
                        .HasColumnName("TOCId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("Tocid");

                    b.ToTable("StudentsOnPedControl", (string)null);
                });

            modelBuilder.Entity("journalapp.TypeOfCrime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfCrime", (string)null);
                });

            modelBuilder.Entity("journalapp.WorkWithParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Questions")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("WorkWithParents");
                });

            modelBuilder.Entity("ParentOfStud", b =>
                {
                    b.HasOne("journalapp.Parent", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("FK_ParentOfStud_Parents");

                    b.HasOne("journalapp.Student", null)
                        .WithMany()
                        .HasForeignKey("SrudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ParentOfStud_Students");
                });

            modelBuilder.Entity("RoomsOfHostel", b =>
                {
                    b.HasOne("journalapp.Hostel", null)
                        .WithMany()
                        .HasForeignKey("HostelId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomsOfHostel_Hostels");

                    b.HasOne("journalapp.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomsOfHostel_Rooms");
                });

            modelBuilder.Entity("StudentsOfRiskGroup", b =>
                {
                    b.HasOne("journalapp.RiskGroup", null)
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOfRiskGroup_RiskGroups");

                    b.HasOne("journalapp.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOfRiskGroup_Students");
                });

            modelBuilder.Entity("journalapp.Business", b =>
                {
                    b.HasOne("journalapp.StudentAssotiation", "StudentAssotiation")
                        .WithMany("Businesses")
                        .HasForeignKey("StudentAssotiationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Business_StudentAssotiations");

                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("Businesses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Business_Students");

                    b.Navigation("Student");

                    b.Navigation("StudentAssotiation");
                });

            modelBuilder.Entity("journalapp.CourseOfGroup", b =>
                {
                    b.HasOne("journalapp.Course", "Course")
                        .WithMany("CourseOfGroups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CourseOfGroup_Courses");

                    b.HasOne("journalapp.Group", "Group")
                        .WithMany("CourseOfGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CourseOfGroup_Groups");

                    b.Navigation("Course");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("journalapp.Curator", b =>
                {
                    b.HasOne("journalapp.Group", "ChildGroup")
                        .WithMany("Curators")
                        .HasForeignKey("ChildGroupId")
                        .HasConstraintName("FK_Curators_Groups");

                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("Curators")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Curators_Students");

                    b.Navigation("ChildGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("journalapp.EducativeEvent", b =>
                {
                    b.HasOne("journalapp.ClassTeacher", "ClassTeacher")
                        .WithMany("EducativeEvents")
                        .HasForeignKey("ClassTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EducativeEvents_ClassTeachers");

                    b.HasOne("journalapp.LineOfBusiness", "Lob")
                        .WithMany("EducativeEvents")
                        .HasForeignKey("Lobid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EducativeEvents_LineOfBusiness");

                    b.Navigation("ClassTeacher");

                    b.Navigation("Lob");
                });

            modelBuilder.Entity("journalapp.GraphicVisitsHostel", b =>
                {
                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("GraphicVisitsHostels")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GraphicVisitsHostel_Students");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("journalapp.Group", b =>
                {
                    b.HasOne("journalapp.ClassTeacher", "ClassTeacher")
                        .WithMany("Groups")
                        .HasForeignKey("ClassTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Groups_ClassTeachers");

                    b.HasOne("journalapp.Speciality", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Groups_Specialities");

                    b.Navigation("ClassTeacher");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("journalapp.Room", b =>
                {
                    b.HasOne("journalapp.Hostel", "Hostel")
                        .WithMany("Rooms")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_Hostels");

                    b.Navigation("Hostel");
                });

            modelBuilder.Entity("journalapp.Speciality", b =>
                {
                    b.HasOne("journalapp.Division", "Division")
                        .WithMany("Specialities")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Specialities_Divisions");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("journalapp.Student", b =>
                {
                    b.HasOne("journalapp.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Students_Groups");

                    b.HasOne("journalapp.HealthGroup", "HealthGroup")
                        .WithMany("Students")
                        .HasForeignKey("HealthGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Students_HealthGroup");

                    b.HasOne("journalapp.Room", "Room")
                        .WithMany("Students")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Students_Rooms");

                    b.Navigation("Group");

                    b.Navigation("HealthGroup");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("journalapp.StudentsOfEvent", b =>
                {
                    b.HasOne("journalapp.Event", "Event")
                        .WithMany("StudentsOfEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOfEvents_Events");

                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("StudentsOfEvents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOfEvents_Students");

                    b.Navigation("Event");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("journalapp.StudentsOnPedControl", b =>
                {
                    b.HasOne("journalapp.Student", "Student")
                        .WithMany("StudentsOnPedControls")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOnPedControl_Students");

                    b.HasOne("journalapp.TypeOfCrime", "Toc")
                        .WithMany("StudentsOnPedControls")
                        .HasForeignKey("Tocid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentsOnPedControl_TypeOfCrime");

                    b.Navigation("Student");

                    b.Navigation("Toc");
                });

            modelBuilder.Entity("journalapp.WorkWithParent", b =>
                {
                    b.HasOne("journalapp.Parent", "Parent")
                        .WithMany("WorkWithParents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WorkWithParents_Parents");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("journalapp.ClassTeacher", b =>
                {
                    b.Navigation("EducativeEvents");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("journalapp.Course", b =>
                {
                    b.Navigation("CourseOfGroups");
                });

            modelBuilder.Entity("journalapp.Division", b =>
                {
                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("journalapp.Event", b =>
                {
                    b.Navigation("StudentsOfEvents");
                });

            modelBuilder.Entity("journalapp.Group", b =>
                {
                    b.Navigation("CourseOfGroups");

                    b.Navigation("Curators");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("journalapp.HealthGroup", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("journalapp.Hostel", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("journalapp.LineOfBusiness", b =>
                {
                    b.Navigation("EducativeEvents");
                });

            modelBuilder.Entity("journalapp.Parent", b =>
                {
                    b.Navigation("WorkWithParents");
                });

            modelBuilder.Entity("journalapp.Room", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("journalapp.Speciality", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("journalapp.Student", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("Curators");

                    b.Navigation("GraphicVisitsHostels");

                    b.Navigation("StudentsOfEvents");

                    b.Navigation("StudentsOnPedControls");
                });

            modelBuilder.Entity("journalapp.StudentAssotiation", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("journalapp.TypeOfCrime", b =>
                {
                    b.Navigation("StudentsOnPedControls");
                });
#pragma warning restore 612, 618
        }
    }
}
